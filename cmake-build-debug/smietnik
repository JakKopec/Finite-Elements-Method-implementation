

        double twoVariablesFunction(double x,double y)
        {
            //dla funkcji -5x^2y+2xy^2+10
            return (-5)*x*x*y+2*x*y*y+10;
        }
        double gaussQuadrature2D(int k){
            if(k==2 | k==3){
                double finalResult=0;
                double x,y=0;
                if(k==3){
                    double points[3]={-0.774597,0,0.774597};
                    double weights[3]={0.555555,0.888888,0.555555};
                    for (int i=0;i<k;i++){
                        for (int j=0;j<k;j++){
                            x=points[i];
                            y=points[j];
                            finalResult += twoVariablesFunction(x,y)*weights[i]*weights[j];
                        }
                    }
                }
                else if(k==2){
                    double points[2]={-1/sqrt(3),1/sqrt(3)};
                    double weights[2]={1,1};
                    for (int i=0;i<k;i++){
                        for (int j=0;j<k;j++){
                            x=points[i];
                            y=points[j];
                            finalResult += twoVariablesFunction(x,y)*weights[i]*weights[j];
                        }
                    }
                }

                return finalResult;
            }
            cout<<"Wrong argument!\n";
            return -1;
        }







































/*cout<<"ETA:\n";
        for(int a=0;a<4;a++) {
            for (int b = 0; b < 4; b++) {
                cout << dNdEta[a][b] << "\t";
            }
            cout << endl;
        }
        cout<<"KSI:\n";
        for(int c=0;c<4;c++) {
            for (int d = 0; d < 4; d++) {
                cout << dNdKsi[c][d] << "\t";
            }
            cout << endl;
        }*/

        /*
        cout<<"dX/dEta\t\tdX/dKsi\n";
        for(int a=0;a<4;a++)
        {
            cout<<dNdEta[a]<<"\t"<<dNdKsi[a]<<endl;
        }*/
/*vector<double> dNdKsi
            {
                    {(-0.25*(1-eta[0])),(0.25*(1-eta[0])),(0.25*(1+eta[0])),(-0.25*(1+eta[0]))}
            };
    vector<double> dNdEta
            {
                    {(-0.25*(1-ksi[0])),(-0.25*(1+ksi[0])),(0.25*(1+ksi[0])),(0.25*(1-ksi[0]))}
            };*/

/*void multiply4x4Vectors(<vector<vector<double>> a,,<vector<vector<double>> b,<vector<vector<double>> c){
        //(double a[][],double b[][],double c[][]){
    double sum=0;
    for(int i=0;i<4;i++){
        for(int j=0;j<4;j++){
            for(int k=0;k<4;k++){
                sum+=a[i][k]*b[k][j];
            }
            c[i][j]=sum;
            sum=0;
        }
    }
    return ;
}*/







/*
        //cout<<"dNdX*dNdXT\n";
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                multipliedX[i][j] = 0;
                for (int k = 0; k < 4; k++) {
                    multipliedX[i][j] += dNdX[i][k] * dNdXT[k][j];
                }
            }
        }
        //displayArray(multipliedX);


        //cout<<"dNdY*dNdYT\n";
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                multipliedX[i][j] = 0;
                for (int k = 0; k < 4; k++) {
                    multipliedY[i][j] += dNdY[i][k] * dNdYT[k][j];
                }
            }
        }
        //displayArray(multipliedY);


        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                H[i][j] = 30 * det * (multipliedX[i][j] + multipliedY[i][j]);//*det*30;
            }
        }*/










